l
l <- list(A,B,C)
lapply(l,[,2])
A[,2]
?lapply
lapply(l,"[",2)
A[,2
]
lapply(l,"[",2"]")
lapply(l,"[",2)
lapply(l,"["2,)
lapply(l,"[",,2)
lapply(l,"[",2,)
sapply(l,"[",1,1)
l
sapply(l,"[",1,1)
Z <- sapply(l,"[",1,1)
Z
rep(Z,c(3,1,2))
rep(1,4)
rep(1:4,4)
rep(1:4,4:1)
rep(1:4,4:3)
rep(1:4,4)
mapply(rep,1:4,4)
mapply(rep,1:3,10)
m <- mapply(rep,1:3,10)
class(m)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if (!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
cacheSolve(B1)
gl(10,2)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4, replace=TRUE)
sample(1:6,4, replace=TRUE)
sample(1:20,10,replace=FALSE)
sample(1:20,10)
LWTTERS
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100,replacement=TRUE,prob = c(0.3,0.7))
flips <- sample(c(0,1),100,replace=TRUE,prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob = 0.7)
flips2 <- rbinom(1, size=100, prob = 0.7)
flips2 <- rbinom(100, size=1, prob = 0.7)
flips2
sum(flips2)
?rnorm()
?rnorm
rnorm(10)
rnorm(10,mean = 100, sd = 25)
rpois(5, mean = 10)
?rpois
rpois(5,10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot()
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab="Speed")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col =2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(data=mtcars,formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, mtcars)
hist(mtcars$mpg)
quit
exit
q()
library(httr)
require(httpuv)
require(jsonlite)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("quiz2", "ddb0d599de51ccd02f4b", secret="6af1109f6ecf442d292425087d49bb13d9bbe9c8")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
sample(1:5)
library(swirl)
rm(list=ls())
ls()
Sys.getlocale("LC_TIME")
swirl()
help(package = lubridate)
arrive <- depart + hours(15) + minutes(50)
arrive <- with_tz(arrive, "Asia/Hong_Kong")
?with_tz.
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008",tz = "Singapore")
last_time
?new_interval
?interval
how_long <- new_interval(last_time, arrive)
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
q()
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
smmary(pollution$pm25)
summary(pollution$pm25)
summary(ppm)
quantile(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col='green')
rug(ppm)
low
high
hist(ppm,col='green',breaks=100)
rug(ppm)
hist(ppm,col='green')
abline(v=12,lwd=2)
abline(v=median(ppm), col="maneta",lwd=4)
abline(v=median(ppm), col="magneta",lwd=4)
abline(v=median(ppm), col="magenta",lwd=4)
where(pollution)
head(pollution)
names(pollution)
reg<-pollution$region
reg<-table(pollution$region)
reg
barplot(reg,col='wheat',main='Number of Countries in Each Region')
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25 ~ region,data=polluyion, col='red')
boxplot(pm25 ~ region,data=pollution, col='red')
par(mfrow=c(2,1),mar=c(4,4,2,1))
subset(pollution,"east")
east<-subset(pollution,region="east")
east<-subset(pollution,region=="east")
head(east)
hist(east$pm25, col="green")
hist(subset(pollution,region=="west")$pm25,col="green")
plot(latitude,pm25)
plot(pollution$latitude,pollution$pm25)
with(pollution,plot(latitide, pm25))
with(pollution,plot(latitude, pm25))
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude,pollution$ppm,col=pollution$region)
plot(pollution$latitude,ppm,col=pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west<-subset(pollution,region="west")
west<-subset(pollution,region=="west")
plot(west$latitude,west$pm25,main="West")
plot(west$latitude,west$pm25,main="East")
plot(east$latitude,east$pm25,main="East")
?Devices
with(faithful,plot(eruption,waiting))
with(faithful,plot(eruptions,waiting))
with(faithful,plot(eruptions,waiting, main="Old Faithful Geyser data"))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myploy.pdf")
pdf(file="myplot.pdf")
title(main = "Old Faithful Geyser data")
with(faithful,plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png,"geyserplot.png")
dev.copy(png,file = "geyserplot.png")
dev.off()
head(cars)
with(cars,plot(speed,dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.EXP ~ Income | region, state, c(4,1))
xyplot(Life.Exp ~ Income | region, state, c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ,hwy,mpg)
qplot(displ,hwy,mpg)
qplot(displ,hwy,data=mpg)
head(airquality)
range(airquality$Ozone,na.rm)
range(airquality$Ozone,na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month , airquality)
boxplot(Ozone~Month , airquality, xlab="Month", ylab="Ozone(ppb)")
boxplot(Ozone~Month , airquality, xlab="Month", ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)", col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)",,col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
info()
skip()
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality,plot(Wind,Ozone))
title(main="Ozone and Wind in New York City")
par()
length(par())
par()
names(par())
par()$pin
par("fg")
?pch
par("pch")
par("lty")
plot(airquality$Wind,airquality$Ozone,n)
plot(airquality$Wind,airquality$Ozone)
plot(airquality$Wind,type="n",airquality$Ozone)
title(main="Wind and Ozone in NYC")
may<-subset(airquality)
may<-subset(airquality, Month==5)
may<-subset(airquality, Month==5)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay<-subset(airquality, Month==5)
notmay<-subset(airquality, Month!=5)
notmay<-subset(airquality, Month!=5)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
plot("topright"),
plot("topright",c()),
skip()
abline(h=12)
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind,airquality$Ozone)
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R main = "Ozone and Solar Radiation")
plot(airquality$Ozone,airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow=c(1,3), mar=c(4,4,2,1),oma =c(0,0,2,0))
plot(airquality$Wind,airquality$Ozone, main="Ozone and Wind")
plot(airquality$Solar.R,airquality$Ozone, main="Ozone and Solar Radiation")
plot(airquality$Temp,airquality$Ozone, main="Ozone and Temperature")
mtext("Ozone and Weather in New York City",TRUE)
mtext("Ozone and Weather in New York City",outer = TRUE)
quit()
library(swirl)
swirl()
swirl()
swirl()
dist(dataFrame)
distxy
hc <- hclust(distxy)
plot(hc)
plot(as.dendogram(hc))
plot(dendogram(hc))
plot(dendrogram(hc))
plot(as.dendrogram(hc))
abline(h=1.5,col="blue)
)
"
)
abline(h=1.5,col="blue")
abline(h=0.4,col="red")
5
5
12
abline(h=0.05,col="green")
dist(dFsm)
hc
heatmap(dataMatrix,cm.colors(25))
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
denmt
plot(denmt)
distmt
cmat
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
which.min(distTmp,2,which.min)
min(distTmp,2,which.min)
which(distTmp,2,which.min)
apply(distTmp,2,which.min)
points(x,y,pch=19,cex=2, col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1, pch=9, cex=2,lwd=2)
kmeans(dataFrames,centers=3)
kmeans(dataFrame,centers=3)
kmObj$iter
plot(x,y,col=knObj$cluster, pch=19,cex=2)
plot(x,y,col=kmObj$cluster, pch=19,cex=2)
points(kmObj$centers, col=c("black","red","green"),pch=3,cex=3,lwd=3)
kmeans(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R",local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
d %*% diag
matu %*% diag %*% t
matu %*% diag %*% matv
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1<-svd(dataMatrix)
svd1$v[,1]
svd$d
svd1$d
top(constantMatrix)
head(constantMatrix)
svd2<-svd(constantMatrix)
svd2$d
svd2
svd2$v[,1:2]
svd2
svd2$d
dim(faceData)
a1<-svd1$u %*% svd1$d %*% svd1$v
a1<-svd1$u[,1] * svd1$d[1]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(imge(a1))]
myImage(imge(a1))
myImage(image(a1))
myImage(image$a1)
myImage(a1)
a2<-svd1$u[,1:2]
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2]))
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(562,563)
names(562 and 563)
names(ssd[562])
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
q()
sub1<-subset(ssd,boolean=1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe()
showMe(color[1:6])
showMe()
showMe(vector[1:6])
showMe[1:6]
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering<-hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart=100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying, 1:12],pch=19,ylab="Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12],pch=19,ylab="Walkdown Cluster")
q()
setwd("F:/JHU_DataScience/datasciencecoursera/analysis of personal movement/RepData_PeerAssessment1-master")
library(knitr)
library(dplyr)
library(ggplot2)
opts_chunk$set(echo = TRUE)
# load data
data_row <- read.csv('activity.csv')
# remove NA in data
data <- data_row[ with (data_row, { !(is.na(steps)) } ), ]
# print out first 20 rows
head(data,20)
by_day <- group_by(data, date)
steps_by_day <- summarise(by_day, total = sum(steps))
steps_by_day
hist(steps_by_day$total, main="Histogram of total number of steps per day", xlab="Total number of steps in a day")
steps_by_interval <- aggregate(steps ~ interval, data, mean)
# create a time series plot
plot(steps_by_interval$interval, steps_by_interval$steps, type='l',
main="Average number of steps over all days", xlab="Interval",
ylab="Average number of steps")
max_steps_row <- which.max(steps_by_interval$steps)
# find interval with this max
steps_by_interval[max_steps_row, ]
sum(is.na(data_row))
#I picked the strategy of replacing NA’s with the mean for that 5-minute interval.
data_imputed <- data_row
for (i in 1:nrow(data_imputed)) {
if (is.na(data_imputed$steps[i])) {
interval_value <- data_imputed$interval[i]
steps_value <- steps_by_interval[
steps_by_interval$interval == interval_value,]
data_imputed$steps[i] <- steps_value$steps
}
}
df_imputed_steps_by_day <- aggregate(steps ~ date, data_imputed, sum)
head(df_imputed_steps_by_day)
hist(df_imputed_steps_by_day$steps, main="Histogram of total number of steps per day (imputed)",  xlab="Total number of steps in a day")
# get mean and median of imputed data
mean(df_imputed_steps_by_day$steps)
median(df_imputed_steps_by_day$steps)
# get mean and median of data without NA's
mean(steps_by_day$total)
median(steps_by_day$total)
data_imputed['type_of_day'] <- weekdays(as.Date(data_imputed$date))
data_imputed$type_of_day[data_imputed$type_of_day  %in% c('Saturday','Sunday') ] <- "weekend"
data_imputed$type_of_day[data_imputed$type_of_day != "weekend"] <- "weekday"
# convert type_of_day from character to factor
data_imputed$type_of_day <- as.factor(data_imputed$type_of_day)
# calculate average steps by interval across all days
df_imputed_steps_by_interval <- aggregate(steps ~ interval + type_of_day, data_imputed, mean)
# creat a plot
qplot(interval,
steps,
data = df_imputed_steps_by_interval,
type = 'l',
geom=c("line"),
xlab = "Interval",
ylab = "Number of steps",
main = "") +
facet_wrap(~ type_of_day, ncol = 1)
